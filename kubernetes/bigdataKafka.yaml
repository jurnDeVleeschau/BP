apiVersion: apps/v1
kind: Deployment
metadata:
  name: bigdata-kafka
  labels:
    app: bigdata-kafka
spec:
  selector:
    matchLabels:
      app: bigdata-kafka
  replicas: 1
  template:
    metadata:
      labels:
        app: bigdata-kafka
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
              name: nginx-conf
            - mountPath: /etc/nginx/password.conf
              subPath: password.conf
              readOnly: true
              name: password-conf
            - mountPath: /usr/share/nginx/html # mount nginx-htmlroot volume to /usr/share/nginx/html
              readOnly: true
              name: nginx-htmlroot

        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.2.2
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: 2181
            - name: ZOOKEEPER_SERVER_ID
              value: 1
            - name: ZOOKEEPER_SERVERS
              value: zookeeper:2888:3888

        - name: kafka1
          image: confluentinc/cp-kafka:7.2.2
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_BROKER_ID
              value: 1
            - name: KAFKA_LOG4J_LOGGERS
              value: 1
            - name: KAFKA_AUTHORIZER_CLASS_NAME
              value: kafka.security.authorizer.AclAuthorizer
            - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"

        - name: kafka2
          image: confluentinc/cp-kafka:7.2.2
          ports:
            - containerPort: 9093
            - containerPort: 29093
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INTERNAL://kafka2:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_BROKER_ID
              value: 1
            - name: KAFKA_LOG4J_LOGGERS
              value: 1
            - name: KAFKA_AUTHORIZER_CLASS_NAME
              value: kafka.security.authorizer.AclAuthorizer
            - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"

        - name: kafka3
          image: confluentinc/cp-kafka:7.2.2
          ports:
            - containerPort: 9094
            - containerPort: 29094
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INTERNAL://kafka3:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_BROKER_ID
              value: 1
            - name: KAFKA_LOG4J_LOGGERS
              value: 1
            - name: KAFKA_AUTHORIZER_CLASS_NAME
              value: kafka.security.authorizer.AclAuthorizer
            - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"

        - name: kafka-schema-registry
          image: confluentinc/cp-schema-registry:7.2.2
          ports:
            - containerPort: 8081
          env:
            - name: SCHEMA_REGISTRY_HOST_NAME
              value: kafka-schema-registry
            - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
              value: 'PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094'
            - name: SCHEMA_REGISTRY_LISTENERS
              value: http://0.0.0.0:8081
---
apiVersion: v1
kind: Service
metadata:
  name: bigdata-kafka
  labels:
    name: bigdata-kafka
spec:
  selector:
    app: bigdata-kafka
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: bigdata-kafka
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: confnginx
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;

      sendfile        on;

      keepalive_timeout  65;

      server {
        listen 80;
        listen [::]:80;
        server_name localhost;

        index index.html;

        auth_basic "Access restricted";
        auth_basic_user_file /etc/nginx/password.conf;

        location /health {
          return 200;
        }

        location / {
          root /usr/share/nginx/html;
          index index.html index.htm;
        }

      }

      server {
        listen 80;
        listen [::]:80;
        server_name www.kafka.local;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_cache_revalidate on;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;

        resolver kube-dns.kube-system.svc.cluster.local valid=5s;

        auth_basic "Access restricted";
        auth_basic_user_file /etc/nginx/password.conf;

        location / {
          proxy_redirect off;
          proxy_pass http://localhost:9870/;
        }
      }
    }
  password.conf: |
    bekdestester:$6$8tHKH5TSh$FbIquguOZIvMzc52APCPGaVUq8N2vhmQlsxfV7PIiVJNTzKWRRrkHqbFsY4DfTqHNZNcejO.dOGpgdwPzzNG80
    firelay:$6$2SpUcpng9JqnLOO9$5oLMFZOQdNjqTeUBGW8Tf0.mw0unAlVuqh8Dt4cHpsa4EzAMDTL1ylKSNErURDO3QqN0f/Gdyg5sUhYhWKYCu.
  index.html: |
    <html>
    <body>
    <p>Some secrets:</p>
    <ul>
    <li><pre>username: .Data.username </pre></li>
    <li><pre>password: .Data.password </pre></li>
    <li><a href='/kafka'>kafka</a></li>
    </ul>
    </body>
    </html>
---